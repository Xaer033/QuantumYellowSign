// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0649
#pragma warning disable 1522
#pragma warning disable 0414
#pragma warning disable 0219
#pragma warning disable 0109

namespace Quantum {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Optional = Quantum.Inspector.OptionalAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  
  public enum PlayerStates : int {
    Moving,
    Reach,
    Fail,
  }
  public enum TileType : int {
    None = 0,
    Wall = 1,
  }
  public enum WaypointStatus : int {
    Next,
    Final,
  }
  [System.FlagsAttribute()]
  public enum InputButtons : int {
    click = 1 << 0,
  }
  public static unsafe partial class InputButtons_ext {
    public static Boolean IsFlagSet(this InputButtons self, InputButtons flag) {
      return (self & flag) == flag;
    }
    public static InputButtons SetFlag(this InputButtons self, InputButtons flag) {
      return self | flag;
    }
    public static InputButtons ClearFlag(this InputButtons self, InputButtons flag) {
      return self & ~flag;
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet1024 {
    public const Int32 SIZE = 128;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[16];
    public const Int32 BitsSize = 1024;
    public Int32 Length {
      get {
        return 1024;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet1024*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 1024, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet1024* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet1024* set) {
      Native.Utils.Clear(&set->bits[0], 128);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet1024* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet1024 FromArray(UInt64[] values) {
      Assert.Always(16 == values.Length);
      BitSet1024 result = default;
      for (int i = 0; i < 16; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 1024);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 128);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 37;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 16);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet1024*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 16);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet128 {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[2];
    public const Int32 BitsSize = 128;
    public Int32 Length {
      get {
        return 128;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet128*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 128, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet128* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet128* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet128* set) {
      Native.Utils.Clear(&set->bits[0], 16);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet128* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet128 FromArray(UInt64[] values) {
      Assert.Always(2 == values.Length);
      BitSet128 result = default;
      for (int i = 0; i < 2; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 128);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 16);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 41;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 2);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet128*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 2);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet2048 {
    public const Int32 SIZE = 256;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[32];
    public const Int32 BitsSize = 2048;
    public Int32 Length {
      get {
        return 2048;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet2048*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 2048, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet2048* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet2048* set) {
      Native.Utils.Clear(&set->bits[0], 256);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet2048* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet2048 FromArray(UInt64[] values) {
      Assert.Always(32 == values.Length);
      BitSet2048 result = default;
      for (int i = 0; i < 32; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 2048);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 256);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 43;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 32);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet2048*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 32);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet256 {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[4];
    public const Int32 BitsSize = 256;
    public Int32 Length {
      get {
        return 256;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet256*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 256, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet256* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet256* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet256* set) {
      Native.Utils.Clear(&set->bits[0], 32);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet256* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet256 FromArray(UInt64[] values) {
      Assert.Always(4 == values.Length);
      BitSet256 result = default;
      for (int i = 0; i < 4; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 256);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 32);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 47;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 4);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet256*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 4);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet4096 {
    public const Int32 SIZE = 512;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[64];
    public const Int32 BitsSize = 4096;
    public Int32 Length {
      get {
        return 4096;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet4096*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 4096, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet4096* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet4096* set) {
      Native.Utils.Clear(&set->bits[0], 512);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet4096* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet4096 FromArray(UInt64[] values) {
      Assert.Always(64 == values.Length);
      BitSet4096 result = default;
      for (int i = 0; i < 64; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 4096);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 512);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 53;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 64);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet4096*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 64);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet512 {
    public const Int32 SIZE = 64;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[8];
    public const Int32 BitsSize = 512;
    public Int32 Length {
      get {
        return 512;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet512*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 512, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet512* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet512* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet512* set) {
      Native.Utils.Clear(&set->bits[0], 64);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet512* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet512 FromArray(UInt64[] values) {
      Assert.Always(8 == values.Length);
      BitSet512 result = default;
      for (int i = 0; i < 8; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 512);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 64);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 59;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 8);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet512*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 8);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct BitSet6 {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    private fixed UInt64 bits[1];
    public const Int32 BitsSize = 6;
    public Int32 Length {
      get {
        return 6;
      }
    }
    public static void Print(void* ptr, FramePrinter printer) {
      var p = (BitSet6*)ptr;
      printer.ScopeBegin();
      UnmanagedUtils.PrintBytesBits((byte*)&p->bits, 6, 64, printer);
      printer.ScopeEnd();
    }
    [System.ObsoleteAttribute("Use instance Set method instead")]
    public static void Set(BitSet6* set, Int32 bit) {
      set->bits[bit/64] |= (1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance Clear method instead")]
    public static void Clear(BitSet6* set, Int32 bit) {
      set->bits[bit/64] &= ~(1UL<<(bit%64));
    }
    [System.ObsoleteAttribute("Use instance ClearAll method instead")]
    public static void ClearAll(BitSet6* set) {
      Native.Utils.Clear(&set->bits[0], 8);
    }
    [System.ObsoleteAttribute("Use instance IsSet method instead")]
    public static Boolean IsSet(BitSet6* set, Int32 bit) {
      return (set->bits[bit/64]&(1UL<<(bit%64))) != 0UL;
    }
    public static BitSet6 FromArray(UInt64[] values) {
      Assert.Always(1 == values.Length);
      BitSet6 result = default;
      for (int i = 0; i < 1; ++i) {
        result.bits[i] = values[i];
      }
      return result;
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Set(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = bits) (p[bit/64]) |= (1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Clear(Int32 bit) {
      Assert.Check(bit >= 0 && bit < 6);
      fixed (UInt64* p = bits) (p[bit/64]) &= ~(1UL<<(bit%64));
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void ClearAll() {
      fixed (UInt64* p = bits) Native.Utils.Clear(p, 8);
    }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public Boolean IsSet(Int32 bit) {
      fixed (UInt64* p = bits) return ((p[bit/64])&(1UL<<(bit%64))) != 0UL;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 61;
        fixed (UInt64* p = bits) hash = hash * 31 + HashCodeUtils.GetArrayHashCode(p, 1);
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (BitSet6*)ptr;
        serializer.Stream.SerializeBuffer(&p->bits[0], 1);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(HexagonalMap))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefHexagonalMap : IEquatable<AssetRefHexagonalMap>, IAssetRef<HexagonalMap> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefHexagonalMap(HexagonalMap value) {
      var r = default(AssetRefHexagonalMap);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefHexagonalMap other && Equals(other);
    }
    public Boolean Equals(AssetRefHexagonalMap other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefHexagonalMap a, AssetRefHexagonalMap b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefHexagonalMap a, AssetRefHexagonalMap b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 67;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefHexagonalMap*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(TileAgentConfig))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefTileAgentConfig : IEquatable<AssetRefTileAgentConfig>, IAssetRef<TileAgentConfig> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefTileAgentConfig(TileAgentConfig value) {
      var r = default(AssetRefTileAgentConfig);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefTileAgentConfig other && Equals(other);
    }
    public Boolean Equals(AssetRefTileAgentConfig other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefTileAgentConfig a, AssetRefTileAgentConfig b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefTileAgentConfig a, AssetRefTileAgentConfig b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 71;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefTileAgentConfig*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(TileMap))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefTileMap : IEquatable<AssetRefTileMap>, IAssetRef<TileMap> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefTileMap(TileMap value) {
      var r = default(AssetRefTileMap);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefTileMap other && Equals(other);
    }
    public Boolean Equals(AssetRefTileMap other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefTileMap a, AssetRefTileMap b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefTileMap a, AssetRefTileMap b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 73;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefTileMap*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(TileMap8))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefTileMap8 : IEquatable<AssetRefTileMap8>, IAssetRef<TileMap8> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefTileMap8(TileMap8 value) {
      var r = default(AssetRefTileMap8);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefTileMap8 other && Equals(other);
    }
    public Boolean Equals(AssetRefTileMap8 other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefTileMap8 a, AssetRefTileMap8 b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefTileMap8 a, AssetRefTileMap8 b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 79;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefTileMap8*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  [Quantum.AssetRefAttribute(typeof(TileMapData))]
  [System.SerializableAttribute()]
  public unsafe partial struct AssetRefTileMapData : IEquatable<AssetRefTileMapData>, IAssetRef<TileMapData> {
    public const Int32 SIZE = 8;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public AssetGuid Id;
    public override String ToString() {
      return AssetRef.ToString(Id);
    }
    public static implicit operator AssetRefTileMapData(TileMapData value) {
      var r = default(AssetRefTileMapData);
      if (value != null) {
        r.Id = value.Guid;
      }
      return r;
    }
    public override Boolean Equals(Object obj) {
      return obj is AssetRefTileMapData other && Equals(other);
    }
    public Boolean Equals(AssetRefTileMapData other) {
      return Id.Equals(other.Id);
    }
    public static Boolean operator ==(AssetRefTileMapData a, AssetRefTileMapData b) {
      return a.Id == b.Id;
    }
    public static Boolean operator !=(AssetRefTileMapData a, AssetRefTileMapData b) {
      return a.Id != b.Id;
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 83;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AssetRefTileMapData*)ptr;
        AssetGuid.Serialize(&p->Id, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct Input {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(4)]
    public Button click;
    [FieldOffset(0)]
    public Int16 position;
    public const int MAX_COUNT = 6;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 89;
        hash = hash * 31 + click.GetHashCode();
        hash = hash * 31 + position.GetHashCode();
        return hash;
      }
    }
    public static Input Read(FrameSerializer serializer) {
      Input i = new Input();
      Serialize(&i, serializer);
      return i;
    }
    public static void Write(FrameSerializer serializer, Input i) {
      Serialize(&i, serializer);
    }
    public Boolean IsDown(InputButtons button) {
      switch (button) {
        case InputButtons.click: return click.IsDown;
      }
      return false;
    }
    public Boolean WasPressed(InputButtons button) {
      switch (button) {
        case InputButtons.click: return click.WasPressed;
      }
      return false;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (Input*)ptr;
        serializer.Stream.Serialize(&p->position);
        Button.Serialize(&p->click, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct _globals_ {
    public const Int32 SIZE = 616;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(24)]
    public FP DeltaTime;
    [FieldOffset(152)]
    public FrameMetaData FrameMetaData;
    [FieldOffset(8)]
    public AssetRefMap Map;
    [FieldOffset(32)]
    public NavMeshRegionMask NavMeshRegions;
    [FieldOffset(320)]
    public PhysicsSceneSettings PhysicsSettings;
    [FieldOffset(16)]
    public BitSet6 PlayerLastConnectionState;
    [FieldOffset(136)]
    public RNGSession RngSession;
    [FieldOffset(192)]
    public BitSet1024 Systems;
    [FieldOffset(0)]
    [FramePrinter.PtrQDictionaryAttribute(typeof(Int32), typeof(ItemsInTile))]
    private Quantum.Ptr TileMapItemsPtr;
    [FieldOffset(40)]
    [FramePrinter.FixedArrayAttribute(typeof(Input), 6)]
    private fixed Byte _input_[96];
    public QDictionaryPtr<Int32, ItemsInTile> TileMapItems {
      get {
        return new QDictionaryPtr<Int32, ItemsInTile>(TileMapItemsPtr);
      }
      set {
        TileMapItemsPtr = value.Ptr;
      }
    }
    public FixedArray<Input> input {
      get {
        fixed (byte* p = _input_) { return new FixedArray<Input>(p, 16, 6); }
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 97;
        hash = hash * 31 + DeltaTime.GetHashCode();
        hash = hash * 31 + FrameMetaData.GetHashCode();
        hash = hash * 31 + Map.GetHashCode();
        hash = hash * 31 + NavMeshRegions.GetHashCode();
        hash = hash * 31 + PhysicsSettings.GetHashCode();
        hash = hash * 31 + PlayerLastConnectionState.GetHashCode();
        hash = hash * 31 + RngSession.GetHashCode();
        hash = hash * 31 + Systems.GetHashCode();
        hash = hash * 31 + TileMapItemsPtr.GetHashCode();
        hash = hash * 31 + HashCodeUtils.GetArrayHashCode(input);
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      TileMapItemsPtr = default;
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (_globals_*)ptr;
        QDictionary.Serialize(p->TileMapItems, &p->TileMapItemsPtr, serializer, StaticDelegates.SerializeInt32, StaticDelegates.SerializeItemsInTile);
        AssetRefMap.Serialize(&p->Map, serializer);
        Quantum.BitSet6.Serialize(&p->PlayerLastConnectionState, serializer);
        FP.Serialize(&p->DeltaTime, serializer);
        NavMeshRegionMask.Serialize(&p->NavMeshRegions, serializer);
        FixedArray.Serialize(p->input, serializer, StaticDelegates.SerializeInput);
        RNGSession.Serialize(&p->RngSession, serializer);
        FrameMetaData.Serialize(&p->FrameMetaData, serializer);
        Quantum.BitSet1024.Serialize(&p->Systems, serializer);
        PhysicsSceneSettings.Serialize(&p->PhysicsSettings, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct AIDecision : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public EntityRef CurrentTarget;
    [FieldOffset(0)]
    [FramePrinter.PtrQDictionaryAttribute(typeof(EntityRef), typeof(Int32))]
    private Quantum.Ptr TargetsPtr;
    public QDictionaryPtr<EntityRef, Int32> Targets {
      get {
        return new QDictionaryPtr<EntityRef, Int32>(TargetsPtr);
      }
      set {
        TargetsPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 101;
        hash = hash * 31 + CurrentTarget.GetHashCode();
        hash = hash * 31 + TargetsPtr.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      TargetsPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (AIDecision*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (AIDecision*)ptr;
        QDictionary.Serialize(p->Targets, &p->TargetsPtr, serializer, StaticDelegates.SerializeEntityRef, StaticDelegates.SerializeInt32);
        EntityRef.Serialize(&p->CurrentTarget, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ItemTile : Quantum.IComponent {
    public const Int32 SIZE = 32;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public QBoolean Block;
    [FieldOffset(8)]
    public FPVector3 LastPosition;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 103;
        hash = hash * 31 + Block.GetHashCode();
        hash = hash * 31 + LastPosition.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ItemTile*)ptr;
        QBoolean.Serialize(&p->Block, serializer);
        FPVector3.Serialize(&p->LastPosition, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct ItemsInTile : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    [FramePrinter.PtrQListAttribute(typeof(EntityRef))]
    private Quantum.Ptr ItemsPtr;
    public QListPtr<EntityRef> Items {
      get {
        return new QListPtr<EntityRef>(ItemsPtr);
      }
      set {
        ItemsPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 107;
        hash = hash * 31 + ItemsPtr.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      ItemsPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (ItemsInTile*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (ItemsInTile*)ptr;
        QList.Serialize(p->Items, &p->ItemsPtr, serializer, StaticDelegates.SerializeEntityRef);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct PlayerLink : Quantum.IComponent {
    public const Int32 SIZE = 4;
    public const Int32 ALIGNMENT = 4;
    [FieldOffset(0)]
    public PlayerRef Player;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 109;
        hash = hash * 31 + Player.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (PlayerLink*)ptr;
        PlayerRef.Serialize(&p->Player, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct RuntimeTileMap : Quantum.IComponentSingleton {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(8)]
    public AssetRefTileMapData MapAsset;
    [FieldOffset(0)]
    [FramePrinter.PtrQListAttribute(typeof(Byte))]
    private Quantum.Ptr TilesPtr;
    public QListPtr<Byte> Tiles {
      get {
        return new QListPtr<Byte>(TilesPtr);
      }
      set {
        TilesPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 113;
        hash = hash * 31 + MapAsset.GetHashCode();
        hash = hash * 31 + TilesPtr.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      TilesPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (RuntimeTileMap*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (RuntimeTileMap*)ptr;
        QList.Serialize(p->Tiles, &p->TilesPtr, serializer, StaticDelegates.SerializeByte);
        Quantum.AssetRefTileMapData.Serialize(&p->MapAsset, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct SearchData : Quantum.IComponent {
    public const Int32 SIZE = 16;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(0)]
    public Int32 Cost;
    [FieldOffset(8)]
    public EntityRef Entity;
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 127;
        hash = hash * 31 + Cost.GetHashCode();
        hash = hash * 31 + Entity.GetHashCode();
        return hash;
      }
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (SearchData*)ptr;
        serializer.Stream.Serialize(&p->Cost);
        EntityRef.Serialize(&p->Entity, serializer);
    }
  }
  [StructLayout(LayoutKind.Explicit)]
  public unsafe partial struct TilePathfinder : Quantum.IComponent {
    public const Int32 SIZE = 24;
    public const Int32 ALIGNMENT = 8;
    [FieldOffset(16)]
    public AssetRefTileAgentConfig Agent;
    [FieldOffset(0)]
    public Int32 CurrentWaypoint;
    [FieldOffset(4)]
    public Int32 TargetPosition;
    [FieldOffset(8)]
    [FramePrinter.PtrQListAttribute(typeof(Int32))]
    private Quantum.Ptr WaypointsPtr;
    public QListPtr<Int32> Waypoints {
      get {
        return new QListPtr<Int32>(WaypointsPtr);
      }
      set {
        WaypointsPtr = value.Ptr;
      }
    }
    public override Int32 GetHashCode() {
      unchecked { 
        var hash = 131;
        hash = hash * 31 + Agent.GetHashCode();
        hash = hash * 31 + CurrentWaypoint.GetHashCode();
        hash = hash * 31 + TargetPosition.GetHashCode();
        hash = hash * 31 + WaypointsPtr.GetHashCode();
        return hash;
      }
    }
    public void ClearPointers(Frame f, EntityRef entity) {
      WaypointsPtr = default;
    }
    public static void OnRemoved(FrameBase frame, EntityRef entity, void* ptr) {
      var p = (TilePathfinder*)ptr;
      p->ClearPointers((Frame)frame, entity);
    }
    public static void Serialize(void* ptr, FrameSerializer serializer) {
        var p = (TilePathfinder*)ptr;
        serializer.Stream.Serialize(&p->CurrentWaypoint);
        serializer.Stream.Serialize(&p->TargetPosition);
        QList.Serialize(p->Waypoints, &p->WaypointsPtr, serializer, StaticDelegates.SerializeInt32);
        Quantum.AssetRefTileAgentConfig.Serialize(&p->Agent, serializer);
    }
  }
  public unsafe partial class Frame {
    private ISignalOnTileMapSearchFailed[] _ISignalOnTileMapSearchFailedSystems;
    private ISignalOnTileMapWaypointReached[] _ISignalOnTileMapWaypointReachedSystems;
    private ISignalOnTileMapMoveAgent[] _ISignalOnTileMapMoveAgentSystems;
    partial void AllocGen() {
      _globals = (_globals_*)Context.Allocator.AllocAndClear(sizeof(_globals_));
    }
    partial void FreeGen() {
      Context.Allocator.Free(_globals);
    }
    partial void CopyFromGen(Frame frame) {
      Native.Utils.Copy(_globals, frame._globals, sizeof(_globals_));
    }
    static partial void InitStaticGen() {
      ComponentTypeId.Setup(() => {
        ComponentTypeId.Add<Quantum.AIDecision>(Quantum.AIDecision.Serialize, null, Quantum.AIDecision.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.ItemTile>(Quantum.ItemTile.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.ItemsInTile>(Quantum.ItemsInTile.Serialize, null, Quantum.ItemsInTile.OnRemoved, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.PlayerLink>(Quantum.PlayerLink.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.RuntimeTileMap>(Quantum.RuntimeTileMap.Serialize, null, Quantum.RuntimeTileMap.OnRemoved, ComponentFlags.Singleton);
        ComponentTypeId.Add<Quantum.SearchData>(Quantum.SearchData.Serialize, null, null, ComponentFlags.None);
        ComponentTypeId.Add<Quantum.TilePathfinder>(Quantum.TilePathfinder.Serialize, null, Quantum.TilePathfinder.OnRemoved, ComponentFlags.None);
      });
    }
    partial void InitGen() {
      Initialize(this, this.SimulationConfig.Entities);
      _ISignalOnTileMapSearchFailedSystems = BuildSignalsArray<ISignalOnTileMapSearchFailed>();
      _ISignalOnTileMapWaypointReachedSystems = BuildSignalsArray<ISignalOnTileMapWaypointReached>();
      _ISignalOnTileMapMoveAgentSystems = BuildSignalsArray<ISignalOnTileMapMoveAgent>();
      _ComponentSignalsOnAdded = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      _ComponentSignalsOnRemoved = new ComponentReactiveCallbackInvoker[ComponentTypeId.Type.Length];
      BuildSignalsArrayOnComponentAdded<Quantum.AIDecision>();
      BuildSignalsArrayOnComponentRemoved<Quantum.AIDecision>();
      BuildSignalsArrayOnComponentAdded<CharacterController2D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController2D>();
      BuildSignalsArrayOnComponentAdded<CharacterController3D>();
      BuildSignalsArrayOnComponentRemoved<CharacterController3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.ItemTile>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ItemTile>();
      BuildSignalsArrayOnComponentAdded<Quantum.ItemsInTile>();
      BuildSignalsArrayOnComponentRemoved<Quantum.ItemsInTile>();
      BuildSignalsArrayOnComponentAdded<MapEntityLink>();
      BuildSignalsArrayOnComponentRemoved<MapEntityLink>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceAgent>();
      BuildSignalsArrayOnComponentAdded<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentRemoved<NavMeshAvoidanceObstacle>();
      BuildSignalsArrayOnComponentAdded<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentRemoved<NavMeshPathfinder>();
      BuildSignalsArrayOnComponentAdded<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentRemoved<NavMeshSteeringAgent>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsBody3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsBody3D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider2D>();
      BuildSignalsArrayOnComponentAdded<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentRemoved<PhysicsCollider3D>();
      BuildSignalsArrayOnComponentAdded<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentRemoved<Quantum.PlayerLink>();
      BuildSignalsArrayOnComponentAdded<Quantum.RuntimeTileMap>();
      BuildSignalsArrayOnComponentRemoved<Quantum.RuntimeTileMap>();
      BuildSignalsArrayOnComponentAdded<Quantum.SearchData>();
      BuildSignalsArrayOnComponentRemoved<Quantum.SearchData>();
      BuildSignalsArrayOnComponentAdded<Quantum.TilePathfinder>();
      BuildSignalsArrayOnComponentRemoved<Quantum.TilePathfinder>();
      BuildSignalsArrayOnComponentAdded<Transform2D>();
      BuildSignalsArrayOnComponentRemoved<Transform2D>();
      BuildSignalsArrayOnComponentAdded<Transform2DVertical>();
      BuildSignalsArrayOnComponentRemoved<Transform2DVertical>();
      BuildSignalsArrayOnComponentAdded<Transform3D>();
      BuildSignalsArrayOnComponentRemoved<Transform3D>();
      BuildSignalsArrayOnComponentAdded<View>();
      BuildSignalsArrayOnComponentRemoved<View>();
    }
    public void SetPlayerInput(Int32 player, Input input) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      var i = _globals->input.GetPointer(player);
      i->position = input.position;
      i->click = i->click.Update(this.Number, input.click);
    }
    public Input* GetPlayerInput(Int32 player) {
      if ((uint)player >= (uint)_globals->input.Length) { throw new System.ArgumentOutOfRangeException("player"); }
      return _globals->input.GetPointer(player);
    }
    public unsafe partial struct FrameSignals {
      public void OnTileMapSearchFailed(EntityRef entity) {
        var array = _f._ISignalOnTileMapSearchFailedSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnTileMapSearchFailed(_f, entity);
          }
        }
      }
      public void OnTileMapWaypointReached(EntityRef entity, FPVector3 waypoint, WaypointStatus status) {
        var array = _f._ISignalOnTileMapWaypointReachedSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnTileMapWaypointReached(_f, entity, waypoint, status);
          }
        }
      }
      public void OnTileMapMoveAgent(EntityRef entity, FPVector3 desiredDirection) {
        var array = _f._ISignalOnTileMapMoveAgentSystems;
        for (Int32 i = 0; i < array.Length; ++i) {
          var s = array[i];
          if (_f.SystemIsEnabledInHierarchy((SystemBase)s)) {
            s.OnTileMapMoveAgent(_f, entity, desiredDirection);
          }
        }
      }
    }
    public unsafe partial struct FrameEvents {
      public const Int32 EVENT_TYPE_COUNT = 2;
      public static Int32 GetParentEventID(Int32 eventID) {
        switch (eventID) {
          default: return -1;
        }
      }
      public static System.Type GetEventType(Int32 eventID) {
        switch (eventID) {
          case EventChangePlayerState.ID: return typeof(EventChangePlayerState);
          case EventEditTileMap.ID: return typeof(EventEditTileMap);
          default: throw new System.ArgumentOutOfRangeException("eventID");
        }
      }
      public EventChangePlayerState ChangePlayerState(PlayerStates State) {
        var ev = _f.Context.AcquireEvent<EventChangePlayerState>(EventChangePlayerState.ID);
        ev.State = State;
        _f.AddEvent(ev);
        return ev;
      }
      public EventEditTileMap EditTileMap(TileType TileType, FPVector3 Position) {
        var ev = _f.Context.AcquireEvent<EventEditTileMap>(EventEditTileMap.ID);
        ev.TileType = TileType;
        ev.Position = Position;
        _f.AddEvent(ev);
        return ev;
      }
    }
    public unsafe partial struct FrameAssets {
      public TileMapData TileMapData(AssetRefTileMapData assetRef) {
         return _f.FindAsset<TileMapData>(assetRef.Id);
      }
      public TileMap TileMap(AssetRefTileMap assetRef) {
         return _f.FindAsset<TileMap>(assetRef.Id);
      }
      public TileMap8 TileMap8(AssetRefTileMap8 assetRef) {
         return _f.FindAsset<TileMap8>(assetRef.Id);
      }
      public HexagonalMap HexagonalMap(AssetRefHexagonalMap assetRef) {
         return _f.FindAsset<HexagonalMap>(assetRef.Id);
      }
      public TileAgentConfig TileAgentConfig(AssetRefTileAgentConfig assetRef) {
         return _f.FindAsset<TileAgentConfig>(assetRef.Id);
      }
    }
  }
  public unsafe interface ISignalOnTileMapSearchFailed : ISignal {
    void OnTileMapSearchFailed(Frame f, EntityRef entity);
  }
  public unsafe interface ISignalOnTileMapWaypointReached : ISignal {
    void OnTileMapWaypointReached(Frame f, EntityRef entity, FPVector3 waypoint, WaypointStatus status);
  }
  public unsafe interface ISignalOnTileMapMoveAgent : ISignal {
    void OnTileMapMoveAgent(Frame f, EntityRef entity, FPVector3 desiredDirection);
  }
  public unsafe partial class EventChangePlayerState : EventBase {
    public new const Int32 ID = 0;
    public PlayerStates State;
    protected EventChangePlayerState(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventChangePlayerState() : 
        base(0, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 37;
        hash = hash * 31 + State.GetHashCode();
        return hash;
      }
    }
  }
  public unsafe partial class EventEditTileMap : EventBase {
    public new const Int32 ID = 1;
    public TileType TileType;
    public FPVector3 Position;
    protected EventEditTileMap(Int32 id, EventFlags flags) : 
        base(id, flags) {
    }
    public EventEditTileMap() : 
        base(1, EventFlags.Server|EventFlags.Client) {
    }
    public new QuantumGame Game {
      get {
        return (QuantumGame)base.Game;
      }
      set {
        base.Game = value;
      }
    }
    public override Int32 GetHashCode() {
      unchecked {
        var hash = 41;
        hash = hash * 31 + TileType.GetHashCode();
        hash = hash * 31 + Position.GetHashCode();
        return hash;
      }
    }
  }
  public static unsafe partial class BitStreamExtensions {
    public static void Serialize(this IBitStream stream, ref AssetRefHexagonalMap value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefTileAgentConfig value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefTileMap value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefTileMap8 value) {
      stream.Serialize(ref value.Id.Value);
    }
    public static void Serialize(this IBitStream stream, ref AssetRefTileMapData value) {
      stream.Serialize(ref value.Id.Value);
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class TileMapData : AssetObject {
  }
  [System.SerializableAttribute()]
  public unsafe partial class TileAgentConfig : AssetObject {
  }
  public unsafe partial class ComponentPrototypeVisitor : Prototypes.ComponentPrototypeVisitorBase {
    public virtual void Visit(Prototypes.AIDecision_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.ItemTile_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.ItemsInTile_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.PlayerLink_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.RuntimeTileMap_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.SearchData_Prototype prototype) {
      VisitFallback(prototype);
    }
    public virtual void Visit(Prototypes.TilePathfinder_Prototype prototype) {
      VisitFallback(prototype);
    }
  }
  public static unsafe partial class Constants {
  }
  public static unsafe partial class StaticDelegates {
    public static FrameSerializer.Delegate SerializeEntityRef;
    public static FrameSerializer.Delegate SerializeInt32;
    public static FrameSerializer.Delegate SerializeByte;
    public static FrameSerializer.Delegate SerializeItemsInTile;
    public static FrameSerializer.Delegate SerializeInput;
    static partial void InitGen() {
      SerializeEntityRef = EntityRef.Serialize;
      SerializeInt32 = (v, s) => {{ s.Stream.Serialize((Int32*)v); }};
      SerializeByte = (v, s) => {{ s.Stream.Serialize((Byte*)v); }};
      SerializeItemsInTile = Quantum.ItemsInTile.Serialize;
      SerializeInput = Quantum.Input.Serialize;
    }
  }
  public unsafe partial class TypeRegistry {
    partial void AddGenerated() {
      Register(typeof(Quantum.AIDecision), Quantum.AIDecision.SIZE);
      Register(typeof(AssetGuid), AssetGuid.SIZE);
      Register(typeof(AssetRefCharacterController2DConfig), AssetRefCharacterController2DConfig.SIZE);
      Register(typeof(AssetRefCharacterController3DConfig), AssetRefCharacterController3DConfig.SIZE);
      Register(typeof(AssetRefEntityPrototype), AssetRefEntityPrototype.SIZE);
      Register(typeof(AssetRefEntityView), AssetRefEntityView.SIZE);
      Register(typeof(Quantum.AssetRefHexagonalMap), Quantum.AssetRefHexagonalMap.SIZE);
      Register(typeof(AssetRefMap), AssetRefMap.SIZE);
      Register(typeof(AssetRefNavMesh), AssetRefNavMesh.SIZE);
      Register(typeof(AssetRefNavMeshAgentConfig), AssetRefNavMeshAgentConfig.SIZE);
      Register(typeof(AssetRefPhysicsMaterial), AssetRefPhysicsMaterial.SIZE);
      Register(typeof(AssetRefPolygonCollider), AssetRefPolygonCollider.SIZE);
      Register(typeof(AssetRefTerrainCollider), AssetRefTerrainCollider.SIZE);
      Register(typeof(Quantum.AssetRefTileAgentConfig), Quantum.AssetRefTileAgentConfig.SIZE);
      Register(typeof(Quantum.AssetRefTileMap), Quantum.AssetRefTileMap.SIZE);
      Register(typeof(Quantum.AssetRefTileMap8), Quantum.AssetRefTileMap8.SIZE);
      Register(typeof(Quantum.AssetRefTileMapData), Quantum.AssetRefTileMapData.SIZE);
      Register(typeof(Quantum.BitSet1024), Quantum.BitSet1024.SIZE);
      Register(typeof(Quantum.BitSet128), Quantum.BitSet128.SIZE);
      Register(typeof(Quantum.BitSet2048), Quantum.BitSet2048.SIZE);
      Register(typeof(Quantum.BitSet256), Quantum.BitSet256.SIZE);
      Register(typeof(Quantum.BitSet4096), Quantum.BitSet4096.SIZE);
      Register(typeof(Quantum.BitSet512), Quantum.BitSet512.SIZE);
      Register(typeof(Quantum.BitSet6), Quantum.BitSet6.SIZE);
      Register(typeof(Button), Button.SIZE);
      Register(typeof(CharacterController2D), CharacterController2D.SIZE);
      Register(typeof(CharacterController3D), CharacterController3D.SIZE);
      Register(typeof(ColorRGBA), ColorRGBA.SIZE);
      Register(typeof(ComponentPrototypeRef), ComponentPrototypeRef.SIZE);
      Register(typeof(DistanceJoint), DistanceJoint.SIZE);
      Register(typeof(DistanceJoint3D), DistanceJoint3D.SIZE);
      Register(typeof(EntityPrototypeRef), EntityPrototypeRef.SIZE);
      Register(typeof(EntityRef), EntityRef.SIZE);
      Register(typeof(FP), FP.SIZE);
      Register(typeof(FPBounds2), FPBounds2.SIZE);
      Register(typeof(FPBounds3), FPBounds3.SIZE);
      Register(typeof(FPMatrix2x2), FPMatrix2x2.SIZE);
      Register(typeof(FPMatrix3x3), FPMatrix3x3.SIZE);
      Register(typeof(FPMatrix4x4), FPMatrix4x4.SIZE);
      Register(typeof(FPQuaternion), FPQuaternion.SIZE);
      Register(typeof(FPVector2), FPVector2.SIZE);
      Register(typeof(FPVector3), FPVector3.SIZE);
      Register(typeof(FrameMetaData), FrameMetaData.SIZE);
      Register(typeof(HingeJoint), HingeJoint.SIZE);
      Register(typeof(HingeJoint3D), HingeJoint3D.SIZE);
      Register(typeof(Hit), Hit.SIZE);
      Register(typeof(Hit3D), Hit3D.SIZE);
      Register(typeof(Quantum.Input), Quantum.Input.SIZE);
      Register(typeof(Quantum.InputButtons), 4);
      Register(typeof(Quantum.ItemTile), Quantum.ItemTile.SIZE);
      Register(typeof(Quantum.ItemsInTile), Quantum.ItemsInTile.SIZE);
      Register(typeof(Joint), Joint.SIZE);
      Register(typeof(Joint3D), Joint3D.SIZE);
      Register(typeof(LayerMask), LayerMask.SIZE);
      Register(typeof(MapEntityId), MapEntityId.SIZE);
      Register(typeof(MapEntityLink), MapEntityLink.SIZE);
      Register(typeof(NavMeshAvoidanceAgent), NavMeshAvoidanceAgent.SIZE);
      Register(typeof(NavMeshAvoidanceObstacle), NavMeshAvoidanceObstacle.SIZE);
      Register(typeof(NavMeshPathfinder), NavMeshPathfinder.SIZE);
      Register(typeof(NavMeshRegionMask), NavMeshRegionMask.SIZE);
      Register(typeof(NavMeshSteeringAgent), NavMeshSteeringAgent.SIZE);
      Register(typeof(NullableFP), NullableFP.SIZE);
      Register(typeof(NullableFPVector2), NullableFPVector2.SIZE);
      Register(typeof(NullableFPVector3), NullableFPVector3.SIZE);
      Register(typeof(NullableNonNegativeFP), NullableNonNegativeFP.SIZE);
      Register(typeof(PhysicsBody2D), PhysicsBody2D.SIZE);
      Register(typeof(PhysicsBody3D), PhysicsBody3D.SIZE);
      Register(typeof(PhysicsCollider2D), PhysicsCollider2D.SIZE);
      Register(typeof(PhysicsCollider3D), PhysicsCollider3D.SIZE);
      Register(typeof(PhysicsSceneSettings), PhysicsSceneSettings.SIZE);
      Register(typeof(Quantum.PlayerLink), Quantum.PlayerLink.SIZE);
      Register(typeof(PlayerRef), PlayerRef.SIZE);
      Register(typeof(Quantum.PlayerStates), 4);
      Register(typeof(Ptr), Ptr.SIZE);
      Register(typeof(QBoolean), QBoolean.SIZE);
      Register(typeof(Quantum.Ptr), Quantum.Ptr.SIZE);
      Register(typeof(RNGSession), RNGSession.SIZE);
      Register(typeof(Quantum.RuntimeTileMap), Quantum.RuntimeTileMap.SIZE);
      Register(typeof(Quantum.SearchData), Quantum.SearchData.SIZE);
      Register(typeof(Shape2D), Shape2D.SIZE);
      Register(typeof(Shape3D), Shape3D.SIZE);
      Register(typeof(SpringJoint), SpringJoint.SIZE);
      Register(typeof(SpringJoint3D), SpringJoint3D.SIZE);
      Register(typeof(Quantum.TilePathfinder), Quantum.TilePathfinder.SIZE);
      Register(typeof(Quantum.TileType), 4);
      Register(typeof(Transform2D), Transform2D.SIZE);
      Register(typeof(Transform2DVertical), Transform2DVertical.SIZE);
      Register(typeof(Transform3D), Transform3D.SIZE);
      Register(typeof(View), View.SIZE);
      Register(typeof(Quantum.WaypointStatus), 4);
      Register(typeof(Quantum._globals_), Quantum._globals_.SIZE);
    }
  }
  public unsafe partial class FramePrinterGen {
    public static void EnsureNotStripped() {
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefHexagonalMap>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefTileAgentConfig>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefTileMap>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefTileMap8>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.AssetRefTileMapData>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.InputButtons>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.PlayerStates>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.TileType>();
      FramePrinter.EnsurePrimitiveNotStripped<Quantum.WaypointStatus>();
    }
  }
}
namespace Quantum.Prototypes {
  using System;
  using System.Collections.Generic;
  using System.Runtime.InteropServices;
  using Photon.Deterministic;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Optional = Quantum.Inspector.OptionalAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerStates))]
  public unsafe partial struct PlayerStates_Prototype {
    public Int32 Value;
    public static implicit operator PlayerStates(PlayerStates_Prototype value) {
        return (PlayerStates)value.Value;
    }
    public static implicit operator PlayerStates_Prototype(PlayerStates value) {
        return new PlayerStates_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(TileType))]
  public unsafe partial struct TileType_Prototype {
    public Int32 Value;
    public static implicit operator TileType(TileType_Prototype value) {
        return (TileType)value.Value;
    }
    public static implicit operator TileType_Prototype(TileType value) {
        return new TileType_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(WaypointStatus))]
  public unsafe partial struct WaypointStatus_Prototype {
    public Int32 Value;
    public static implicit operator WaypointStatus(WaypointStatus_Prototype value) {
        return (WaypointStatus)value.Value;
    }
    public static implicit operator WaypointStatus_Prototype(WaypointStatus value) {
        return new WaypointStatus_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(InputButtons))]
  public unsafe partial struct InputButtons_Prototype {
    public Int32 Value;
    public static implicit operator InputButtons(InputButtons_Prototype value) {
        return (InputButtons)value.Value;
    }
    public static implicit operator InputButtons_Prototype(InputButtons value) {
        return new InputButtons_Prototype() { Value = (Int32)value };
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(KeyValuePair<EntityRef, Int32>))]
  public unsafe partial class DictionaryEntry_EntityRef_Int32_Prototype : DictionaryEntryPrototype {
    public MapEntityId Key;
    public Int32 Value;
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(AIDecision))]
  public sealed unsafe partial class AIDecision_Prototype : ComponentPrototype<AIDecision> {
    public MapEntityId CurrentTarget;
    [DictionaryAttribute()]
    [DynamicCollectionAttribute()]
    public DictionaryEntry_EntityRef_Int32_Prototype[] Targets = {};
    partial void MaterializeUser(Frame frame, ref AIDecision result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      AIDecision component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref AIDecision result, in PrototypeMaterializationContext context) {
      PrototypeValidator.FindMapEntity(this.CurrentTarget, in context, out result.CurrentTarget);
      if (this.Targets.Length == 0) {
        result.Targets = default;
      } else {
        var dict = frame.AllocateDictionary(result.Targets, this.Targets.Length);
        for (int i = 0; i < this.Targets.Length; ++i) {
          EntityRef tmpKey = default;
          Int32 tmpValue = default;
          PrototypeValidator.FindMapEntity(this.Targets[i].Key, in context, out tmpKey);
          tmpValue = this.Targets[i].Value;
          PrototypeValidator.AddToDictionary(dict, tmpKey, tmpValue, in context);
        }
        result.Targets = dict;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(Input))]
  public sealed unsafe partial class Input_Prototype : StructPrototype {
    public Int16 position;
    public Button click;
    partial void MaterializeUser(Frame frame, ref Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Input result, in PrototypeMaterializationContext context) {
      result.click = this.click;
      result.position = this.position;
      MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ItemTile))]
  public sealed unsafe partial class ItemTile_Prototype : ComponentPrototype<ItemTile> {
    public FPVector3 LastPosition;
    public QBoolean Block;
    partial void MaterializeUser(Frame frame, ref ItemTile result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      ItemTile component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref ItemTile result, in PrototypeMaterializationContext context) {
      result.Block = this.Block;
      result.LastPosition = this.LastPosition;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(ItemsInTile))]
  public sealed unsafe partial class ItemsInTile_Prototype : ComponentPrototype<ItemsInTile> {
    [DynamicCollectionAttribute()]
    public MapEntityId[] Items = {};
    partial void MaterializeUser(Frame frame, ref ItemsInTile result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      ItemsInTile component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref ItemsInTile result, in PrototypeMaterializationContext context) {
      if (this.Items.Length == 0) {
        result.Items = default;
      } else {
        var list = frame.AllocateList(result.Items, this.Items.Length);
        for (int i = 0; i < this.Items.Length; ++i) {
          EntityRef tmp = default;
          PrototypeValidator.FindMapEntity(this.Items[i], in context, out tmp);
          list.Add(tmp);
        }
        result.Items = list;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(PlayerLink))]
  public sealed unsafe partial class PlayerLink_Prototype : ComponentPrototype<PlayerLink> {
    public PlayerRef Player;
    partial void MaterializeUser(Frame frame, ref PlayerLink result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      PlayerLink component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref PlayerLink result, in PrototypeMaterializationContext context) {
      result.Player = this.Player;
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(RuntimeTileMap))]
  public sealed unsafe partial class RuntimeTileMap_Prototype : ComponentPrototype<RuntimeTileMap> {
    public AssetRefTileMapData MapAsset;
    [DynamicCollectionAttribute()]
    public Byte[] Tiles = {};
    partial void MaterializeUser(Frame frame, ref RuntimeTileMap result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      RuntimeTileMap component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref RuntimeTileMap result, in PrototypeMaterializationContext context) {
      result.MapAsset = this.MapAsset;
      if (this.Tiles.Length == 0) {
        result.Tiles = default;
      } else {
        var list = frame.AllocateList(result.Tiles, this.Tiles.Length);
        for (int i = 0; i < this.Tiles.Length; ++i) {
          Byte tmp = default;
          tmp = this.Tiles[i];
          list.Add(tmp);
        }
        result.Tiles = list;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(SearchData))]
  public sealed unsafe partial class SearchData_Prototype : ComponentPrototype<SearchData> {
    public MapEntityId Entity;
    public Int32 Cost;
    partial void MaterializeUser(Frame frame, ref SearchData result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      SearchData component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref SearchData result, in PrototypeMaterializationContext context) {
      result.Cost = this.Cost;
      PrototypeValidator.FindMapEntity(this.Entity, in context, out result.Entity);
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  [System.SerializableAttribute()]
  [Prototype(typeof(TilePathfinder))]
  public sealed unsafe partial class TilePathfinder_Prototype : ComponentPrototype<TilePathfinder> {
    public AssetRefTileAgentConfig Agent;
    [DynamicCollectionAttribute()]
    public Int32[] Waypoints = {};
    public Int32 TargetPosition;
    public Int32 CurrentWaypoint;
    partial void MaterializeUser(Frame frame, ref TilePathfinder result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
      TilePathfinder component = default;
      Materialize((Frame)f, ref component, in context);
      return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref TilePathfinder result, in PrototypeMaterializationContext context) {
      result.Agent = this.Agent;
      result.CurrentWaypoint = this.CurrentWaypoint;
      result.TargetPosition = this.TargetPosition;
      if (this.Waypoints.Length == 0) {
        result.Waypoints = default;
      } else {
        var list = frame.AllocateList(result.Waypoints, this.Waypoints.Length);
        for (int i = 0; i < this.Waypoints.Length; ++i) {
          Int32 tmp = default;
          tmp = this.Waypoints[i];
          list.Add(tmp);
        }
        result.Waypoints = list;
      }
      MaterializeUser(frame, ref result, in context);
    }
    public override void Dispatch(ComponentPrototypeVisitorBase visitor) {
      ((ComponentPrototypeVisitor)visitor).Visit(this);
    }
  }
  public unsafe partial class FlatEntityPrototypeContainer {
    [ArrayLength(0, 1)]
    public List<Prototypes.AIDecision_Prototype> AIDecision;
    [ArrayLength(0, 1)]
    public List<Prototypes.ItemTile_Prototype> ItemTile;
    [ArrayLength(0, 1)]
    public List<Prototypes.ItemsInTile_Prototype> ItemsInTile;
    [ArrayLength(0, 1)]
    public List<Prototypes.PlayerLink_Prototype> PlayerLink;
    [ArrayLength(0, 1)]
    public List<Prototypes.RuntimeTileMap_Prototype> RuntimeTileMap;
    [ArrayLength(0, 1)]
    public List<Prototypes.SearchData_Prototype> SearchData;
    [ArrayLength(0, 1)]
    public List<Prototypes.TilePathfinder_Prototype> TilePathfinder;
    partial void CollectGen(List<ComponentPrototype> target) {
      Collect(AIDecision, target);
      Collect(ItemTile, target);
      Collect(ItemsInTile, target);
      Collect(PlayerLink, target);
      Collect(RuntimeTileMap, target);
      Collect(SearchData, target);
      Collect(TilePathfinder, target);
    }
    public unsafe partial class StoreVisitor {
      public override void Visit(Prototypes.AIDecision_Prototype prototype) {
        Storage.Store(prototype, ref Storage.AIDecision);
      }
      public override void Visit(Prototypes.ItemTile_Prototype prototype) {
        Storage.Store(prototype, ref Storage.ItemTile);
      }
      public override void Visit(Prototypes.ItemsInTile_Prototype prototype) {
        Storage.Store(prototype, ref Storage.ItemsInTile);
      }
      public override void Visit(Prototypes.PlayerLink_Prototype prototype) {
        Storage.Store(prototype, ref Storage.PlayerLink);
      }
      public override void Visit(Prototypes.RuntimeTileMap_Prototype prototype) {
        Storage.Store(prototype, ref Storage.RuntimeTileMap);
      }
      public override void Visit(Prototypes.SearchData_Prototype prototype) {
        Storage.Store(prototype, ref Storage.SearchData);
      }
      public override void Visit(Prototypes.TilePathfinder_Prototype prototype) {
        Storage.Store(prototype, ref Storage.TilePathfinder);
      }
    }
  }
}
#pragma warning restore 0649
#pragma warning restore 1522
#pragma warning restore 0414
#pragma warning restore 0219
#pragma warning restore 0109
